# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StartPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget, QFileDialog, QTableWidgetItem, QMessageBox
from PyQt5.QtCore import QAbstractTableModel, Qt
from PyQt5.QtGui import QPixmap

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import glob

from sklearn.preprocessing import MinMaxScaler, scale, normalize, LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split, KFold
from sklearn.neighbors import KNeighborsClassifier, LocalOutlierFactor
from sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, roc_curve, auc
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVR, SVC
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import BaggingClassifier,StackingClassifier,VotingClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV
from sklearn.decomposition import PCA

from tensorflow.keras.utils import to_categorical
from itertools import cycle
from xgboost import XGBClassifier
from catboost import CatBoostClassifier

from tensorflow import keras

from tensorflow.keras import layers
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, Conv1D, MaxPooling1D
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.optimizers import Adam

class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(814, 899)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 811, 871))
        self.tabWidget.setObjectName("tabWidget")
        self.DataPreprocessing = QtWidgets.QWidget()
        self.DataPreprocessing.setObjectName("DataPreprocessing")
        self.groupBoxDataLoading = QtWidgets.QGroupBox(self.DataPreprocessing)
        self.groupBoxDataLoading.setGeometry(QtCore.QRect(0, 10, 481, 821))
        self.groupBoxDataLoading.setObjectName("groupBoxDataLoading")
        self.textboxDataPath = QtWidgets.QPlainTextEdit(self.groupBoxDataLoading)
        self.textboxDataPath.setGeometry(QtCore.QRect(20, 30, 341, 31))
        self.textboxDataPath.setObjectName("textboxDataPath")
        self.pushButtonSelectDataPath = QtWidgets.QPushButton(self.groupBoxDataLoading)
        self.pushButtonSelectDataPath.setGeometry(QtCore.QRect(380, 30, 75, 31))
        self.pushButtonSelectDataPath.setObjectName("pushButtonSelectDataPath")
        self.tableViewDatas = QtWidgets.QTableWidget(self.groupBoxDataLoading)
        self.tableViewDatas.setGeometry(QtCore.QRect(20, 70, 441, 731))
        self.tableViewDatas.setObjectName("tableViewDatas")
        self.tableViewDatas.setColumnCount(0)
        self.tableViewDatas.setRowCount(0)
        self.groupBoxPreprocessing = QtWidgets.QGroupBox(self.DataPreprocessing)
        self.groupBoxPreprocessing.setGeometry(QtCore.QRect(490, 10, 311, 821))
        self.groupBoxPreprocessing.setObjectName("groupBoxPreprocessing")
        self.groupBoxTargetFeatures = QtWidgets.QGroupBox(self.groupBoxPreprocessing)
        self.groupBoxTargetFeatures.setGeometry(QtCore.QRect(10, 100, 291, 211))
        self.groupBoxTargetFeatures.setObjectName("groupBoxTargetFeatures")
        self.comboBoxTargetFeatures = QtWidgets.QComboBox(self.groupBoxTargetFeatures)
        self.comboBoxTargetFeatures.setGeometry(QtCore.QRect(20, 140, 251, 22))
        self.comboBoxTargetFeatures.setObjectName("comboBoxTargetFeatures")
        self.label = QtWidgets.QLabel(self.groupBoxTargetFeatures)
        self.label.setGeometry(QtCore.QRect(120, 110, 61, 16))
        self.label.setObjectName("label")
        self.pushButtonTargetFeature = QtWidgets.QPushButton(self.groupBoxTargetFeatures)
        self.pushButtonTargetFeature.setGeometry(QtCore.QRect(200, 170, 75, 31))
        self.pushButtonTargetFeature.setObjectName("pushButtonTargetFeature")
        self.comboBoxFeatures = QtWidgets.QComboBox(self.groupBoxTargetFeatures)
        self.comboBoxFeatures.setGeometry(QtCore.QRect(20, 50, 251, 22))
        self.comboBoxFeatures.setObjectName("comboBoxFeatures")
        self.pushButtonDeleteFeatures = QtWidgets.QPushButton(self.groupBoxTargetFeatures)
        self.pushButtonDeleteFeatures.setGeometry(QtCore.QRect(200, 80, 75, 31))
        self.pushButtonDeleteFeatures.setObjectName("pushButtonDeleteFeatures")
        self.label_23 = QtWidgets.QLabel(self.groupBoxTargetFeatures)
        self.label_23.setGeometry(QtCore.QRect(110, 20, 121, 16))
        self.label_23.setObjectName("label_23")
        self.groupBoxStandardization = QtWidgets.QGroupBox(self.groupBoxPreprocessing)
        self.groupBoxStandardization.setGeometry(QtCore.QRect(10, 310, 291, 201))
        self.groupBoxStandardization.setObjectName("groupBoxStandardization")
        self.radioButtonStandardization = QtWidgets.QRadioButton(self.groupBoxStandardization)
        self.radioButtonStandardization.setGeometry(QtCore.QRect(100, 30, 111, 17))
        self.radioButtonStandardization.setObjectName("radioButtonStandardization")
        self.radioButtonNormasilation = QtWidgets.QRadioButton(self.groupBoxStandardization)
        self.radioButtonNormasilation.setGeometry(QtCore.QRect(100, 60, 101, 17))
        self.radioButtonNormasilation.setObjectName("radioButtonNormasilation")
        self.radioButtonMinMaxScaler = QtWidgets.QRadioButton(self.groupBoxStandardization)
        self.radioButtonMinMaxScaler.setGeometry(QtCore.QRect(100, 120, 101, 17))
        self.radioButtonMinMaxScaler.setObjectName("radioButtonMinMaxScaler")
        self.pushButtonApplyStandardization = QtWidgets.QPushButton(self.groupBoxStandardization)
        self.pushButtonApplyStandardization.setGeometry(QtCore.QRect(100, 150, 101, 31))
        self.pushButtonApplyStandardization.setObjectName("pushButtonApplyStandardization")
        self.spinBoxMaxScale = QtWidgets.QSpinBox(self.groupBoxStandardization)
        self.spinBoxMaxScale.setGeometry(QtCore.QRect(80, 90, 42, 22))
        self.spinBoxMaxScale.setObjectName("spinBoxMaxScale")
        self.spinBoxMinScale = QtWidgets.QSpinBox(self.groupBoxStandardization)
        self.spinBoxMinScale.setGeometry(QtCore.QRect(180, 90, 42, 22))
        self.spinBoxMinScale.setObjectName("spinBoxMinScale")
        self.label_17 = QtWidgets.QLabel(self.groupBoxStandardization)
        self.label_17.setGeometry(QtCore.QRect(50, 90, 21, 21))
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.groupBoxStandardization)
        self.label_18.setGeometry(QtCore.QRect(150, 90, 21, 21))
        self.label_18.setObjectName("label_18")
        self.groupBoxOutlierDatas = QtWidgets.QGroupBox(self.groupBoxPreprocessing)
        self.groupBoxOutlierDatas.setGeometry(QtCore.QRect(10, 510, 291, 81))
        self.groupBoxOutlierDatas.setObjectName("groupBoxOutlierDatas")
        self.radioButtonSuppressionMethod = QtWidgets.QRadioButton(self.groupBoxOutlierDatas)
        self.radioButtonSuppressionMethod.setGeometry(QtCore.QRect(80, 20, 121, 17))
        self.radioButtonSuppressionMethod.setObjectName("radioButtonSuppressionMethod")
        self.pushButtonApplyOutlierData = QtWidgets.QPushButton(self.groupBoxOutlierDatas)
        self.pushButtonApplyOutlierData.setGeometry(QtCore.QRect(90, 40, 101, 31))
        self.pushButtonApplyOutlierData.setObjectName("pushButtonApplyOutlierData")
        self.groupBoxMissingValues = QtWidgets.QGroupBox(self.groupBoxPreprocessing)
        self.groupBoxMissingValues.setGeometry(QtCore.QRect(10, 590, 291, 141))
        self.groupBoxMissingValues.setObjectName("groupBoxMissingValues")
        self.radioButtonMeanImport = QtWidgets.QRadioButton(self.groupBoxMissingValues)
        self.radioButtonMeanImport.setGeometry(QtCore.QRect(89, 30, 121, 17))
        self.radioButtonMeanImport.setObjectName("radioButtonMeanImport")
        self.radioButtonMedianImport = QtWidgets.QRadioButton(self.groupBoxMissingValues)
        self.radioButtonMedianImport.setGeometry(QtCore.QRect(89, 50, 111, 17))
        self.radioButtonMedianImport.setObjectName("radioButtonMedianImport")
        self.radioButtonDeleteMissingValues = QtWidgets.QRadioButton(self.groupBoxMissingValues)
        self.radioButtonDeleteMissingValues.setGeometry(QtCore.QRect(90, 70, 121, 20))
        self.radioButtonDeleteMissingValues.setObjectName("radioButtonDeleteMissingValues")
        self.pushButtonMissingValue = QtWidgets.QPushButton(self.groupBoxMissingValues)
        self.pushButtonMissingValue.setGeometry(QtCore.QRect(100, 100, 101, 31))
        self.pushButtonMissingValue.setObjectName("pushButtonMissingValue")
        self.groupBoxDataSetInformation = QtWidgets.QGroupBox(self.groupBoxPreprocessing)
        self.groupBoxDataSetInformation.setGeometry(QtCore.QRect(10, 19, 291, 71))
        self.groupBoxDataSetInformation.setObjectName("groupBoxDataSetInformation")
        self.label_2 = QtWidgets.QLabel(self.groupBoxDataSetInformation)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 91, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBoxDataSetInformation)
        self.label_3.setGeometry(QtCore.QRect(20, 40, 81, 16))
        self.label_3.setObjectName("label_3")
        self.labelMissingValueCount = QtWidgets.QLabel(self.groupBoxDataSetInformation)
        self.labelMissingValueCount.setGeometry(QtCore.QRect(110, 20, 161, 16))
        self.labelMissingValueCount.setText("")
        self.labelMissingValueCount.setObjectName("labelMissingValueCount")
        self.labelFeaturesValue = QtWidgets.QLabel(self.groupBoxDataSetInformation)
        self.labelFeaturesValue.setGeometry(QtCore.QRect(110, 40, 171, 16))
        self.labelFeaturesValue.setText("")
        self.labelFeaturesValue.setObjectName("labelFeaturesValue")
        self.groupBoxPCA = QtWidgets.QGroupBox(self.groupBoxPreprocessing)
        self.groupBoxPCA.setGeometry(QtCore.QRect(10, 730, 291, 80))
        self.groupBoxPCA.setObjectName("groupBoxPCA")
        self.pushButtonPCA = QtWidgets.QPushButton(self.groupBoxPCA)
        self.pushButtonPCA.setGeometry(QtCore.QRect(170, 20, 101, 51))
        self.pushButtonPCA.setObjectName("pushButtonPCA")
        self.spinBoxPCAN = QtWidgets.QSpinBox(self.groupBoxPCA)
        self.spinBoxPCAN.setGeometry(QtCore.QRect(60, 30, 81, 31))
        self.spinBoxPCAN.setObjectName("spinBoxPCAN")
        self.label_27 = QtWidgets.QLabel(self.groupBoxPCA)
        self.label_27.setGeometry(QtCore.QRect(10, 35, 41, 21))
        self.label_27.setObjectName("label_27")
        self.tabWidget.addTab(self.DataPreprocessing, "")
        self.tabTrainTestSplit = QtWidgets.QWidget()
        self.tabTrainTestSplit.setObjectName("tabTrainTestSplit")
        self.groupBoxTrainTestSplit = QtWidgets.QGroupBox(self.tabTrainTestSplit)
        self.groupBoxTrainTestSplit.setGeometry(QtCore.QRect(0, 10, 801, 211))
        self.groupBoxTrainTestSplit.setObjectName("groupBoxTrainTestSplit")
        self.groupBoxHoldout = QtWidgets.QGroupBox(self.groupBoxTrainTestSplit)
        self.groupBoxHoldout.setGeometry(QtCore.QRect(280, 30, 221, 151))
        self.groupBoxHoldout.setObjectName("groupBoxHoldout")
        self.label_4 = QtWidgets.QLabel(self.groupBoxHoldout)
        self.label_4.setGeometry(QtCore.QRect(50, 40, 71, 21))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBoxHoldout)
        self.label_5.setGeometry(QtCore.QRect(50, 70, 71, 21))
        self.label_5.setObjectName("label_5")
        self.spinBoxRandomState = QtWidgets.QSpinBox(self.groupBoxHoldout)
        self.spinBoxRandomState.setGeometry(QtCore.QRect(130, 40, 51, 22))
        self.spinBoxRandomState.setObjectName("spinBoxRandomState")
        self.doubleSpinBoxTestSize = QtWidgets.QDoubleSpinBox(self.groupBoxHoldout)
        self.doubleSpinBoxTestSize.setGeometry(QtCore.QRect(130, 70, 51, 22))
        self.doubleSpinBoxTestSize.setMinimum(0.1)
        self.doubleSpinBoxTestSize.setMaximum(1.0)
        self.doubleSpinBoxTestSize.setSingleStep(0.1)
        self.doubleSpinBoxTestSize.setObjectName("doubleSpinBoxTestSize")
        self.pushButtonAppyHoldout = QtWidgets.QPushButton(self.groupBoxHoldout)
        self.pushButtonAppyHoldout.setGeometry(QtCore.QRect(110, 110, 71, 23))
        self.pushButtonAppyHoldout.setObjectName("pushButtonAppyHoldout")
        self.groupBoxSplittedData = QtWidgets.QGroupBox(self.tabTrainTestSplit)
        self.groupBoxSplittedData.setGeometry(QtCore.QRect(0, 230, 801, 601))
        self.groupBoxSplittedData.setObjectName("groupBoxSplittedData")
        self.tableWidgetTrainX = QtWidgets.QTableWidget(self.groupBoxSplittedData)
        self.tableWidgetTrainX.setGeometry(QtCore.QRect(30, 80, 361, 192))
        self.tableWidgetTrainX.setObjectName("tableWidgetTrainX")
        self.tableWidgetTrainX.setColumnCount(0)
        self.tableWidgetTrainX.setRowCount(0)
        self.tableWidgetTrainY = QtWidgets.QTableWidget(self.groupBoxSplittedData)
        self.tableWidgetTrainY.setGeometry(QtCore.QRect(420, 80, 361, 192))
        self.tableWidgetTrainY.setObjectName("tableWidgetTrainY")
        self.tableWidgetTrainY.setColumnCount(0)
        self.tableWidgetTrainY.setRowCount(0)
        self.tableWidgetTestX = QtWidgets.QTableWidget(self.groupBoxSplittedData)
        self.tableWidgetTestX.setGeometry(QtCore.QRect(30, 320, 361, 192))
        self.tableWidgetTestX.setObjectName("tableWidgetTestX")
        self.tableWidgetTestX.setColumnCount(0)
        self.tableWidgetTestX.setRowCount(0)
        self.tableWidgetTestY = QtWidgets.QTableWidget(self.groupBoxSplittedData)
        self.tableWidgetTestY.setGeometry(QtCore.QRect(420, 320, 361, 192))
        self.tableWidgetTestY.setObjectName("tableWidgetTestY")
        self.tableWidgetTestY.setColumnCount(0)
        self.tableWidgetTestY.setRowCount(0)
        self.label_7 = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.label_7.setGeometry(QtCore.QRect(190, 50, 47, 21))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.label_8.setGeometry(QtCore.QRect(590, 50, 47, 21))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.label_9.setGeometry(QtCore.QRect(190, 290, 47, 21))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.label_10.setGeometry(QtCore.QRect(590, 290, 47, 21))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.label_11.setGeometry(QtCore.QRect(50, 530, 141, 16))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.label_12.setGeometry(QtCore.QRect(50, 560, 141, 16))
        self.label_12.setObjectName("label_12")
        self.labelTrainDataCount = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.labelTrainDataCount.setGeometry(QtCore.QRect(200, 530, 71, 16))
        self.labelTrainDataCount.setText("")
        self.labelTrainDataCount.setObjectName("labelTrainDataCount")
        self.labelTestDataCount = QtWidgets.QLabel(self.groupBoxSplittedData)
        self.labelTestDataCount.setGeometry(QtCore.QRect(200, 560, 71, 16))
        self.labelTestDataCount.setText("")
        self.labelTestDataCount.setObjectName("labelTestDataCount")
        self.tabWidget.addTab(self.tabTrainTestSplit, "")
        self.tabTraining = QtWidgets.QWidget()
        self.tabTraining.setObjectName("tabTraining")
        self.groupBoxClassification = QtWidgets.QGroupBox(self.tabTraining)
        self.groupBoxClassification.setGeometry(QtCore.QRect(10, 20, 781, 111))
        self.groupBoxClassification.setObjectName("groupBoxClassification")
        self.radioButtonKNNClassifier = QtWidgets.QRadioButton(self.groupBoxClassification)
        self.radioButtonKNNClassifier.setGeometry(QtCore.QRect(30, 40, 82, 17))
        self.radioButtonKNNClassifier.setObjectName("radioButtonKNNClassifier")
        self.radioButtonDecisionTreeClassifier = QtWidgets.QRadioButton(self.groupBoxClassification)
        self.radioButtonDecisionTreeClassifier.setGeometry(QtCore.QRect(100, 40, 91, 17))
        self.radioButtonDecisionTreeClassifier.setObjectName("radioButtonDecisionTreeClassifier")
        self.radioButtonRandomForestTreeClassifier = QtWidgets.QRadioButton(self.groupBoxClassification)
        self.radioButtonRandomForestTreeClassifier.setGeometry(QtCore.QRect(210, 40, 131, 17))
        self.radioButtonRandomForestTreeClassifier.setObjectName("radioButtonRandomForestTreeClassifier")
        self.radioButtonNaiveBayesClassifier = QtWidgets.QRadioButton(self.groupBoxClassification)
        self.radioButtonNaiveBayesClassifier.setGeometry(QtCore.QRect(350, 40, 91, 17))
        self.radioButtonNaiveBayesClassifier.setObjectName("radioButtonNaiveBayesClassifier")
        self.pushButtonClassificationTrain = QtWidgets.QPushButton(self.groupBoxClassification)
        self.pushButtonClassificationTrain.setGeometry(QtCore.QRect(360, 80, 75, 21))
        self.pushButtonClassificationTrain.setObjectName("pushButtonClassificationTrain")
        self.labelTestDataAccuracy = QtWidgets.QLabel(self.groupBoxClassification)
        self.labelTestDataAccuracy.setGeometry(QtCore.QRect(250, 80, 47, 16))
        self.labelTestDataAccuracy.setText("")
        self.labelTestDataAccuracy.setObjectName("labelTestDataAccuracy")
        self.label_13 = QtWidgets.QLabel(self.groupBoxClassification)
        self.label_13.setGeometry(QtCore.QRect(110, 80, 141, 16))
        self.label_13.setObjectName("label_13")
        self.groupBoxKFoldClassification = QtWidgets.QGroupBox(self.groupBoxClassification)
        self.groupBoxKFoldClassification.setGeometry(QtCore.QRect(530, 20, 211, 81))
        self.groupBoxKFoldClassification.setObjectName("groupBoxKFoldClassification")
        self.spinBoxNFoldClassification = QtWidgets.QSpinBox(self.groupBoxKFoldClassification)
        self.spinBoxNFoldClassification.setGeometry(QtCore.QRect(140, 10, 51, 22))
        self.spinBoxNFoldClassification.setObjectName("spinBoxNFoldClassification")
        self.label_15 = QtWidgets.QLabel(self.groupBoxKFoldClassification)
        self.label_15.setGeometry(QtCore.QRect(60, 10, 61, 21))
        self.label_15.setObjectName("label_15")
        self.pushButtonApplyKFoldClassification = QtWidgets.QPushButton(self.groupBoxKFoldClassification)
        self.pushButtonApplyKFoldClassification.setGeometry(QtCore.QRect(120, 40, 71, 23))
        self.pushButtonApplyKFoldClassification.setObjectName("pushButtonApplyKFoldClassification")
        self.groupBoxRegression = QtWidgets.QGroupBox(self.tabTraining)
        self.groupBoxRegression.setGeometry(QtCore.QRect(10, 140, 781, 121))
        self.groupBoxRegression.setObjectName("groupBoxRegression")
        self.radioButtonSVMRegression = QtWidgets.QRadioButton(self.groupBoxRegression)
        self.radioButtonSVMRegression.setGeometry(QtCore.QRect(340, 50, 141, 17))
        self.radioButtonSVMRegression.setObjectName("radioButtonSVMRegression")
        self.radioButtonDecisionTreeRegression = QtWidgets.QRadioButton(self.groupBoxRegression)
        self.radioButtonDecisionTreeRegression.setGeometry(QtCore.QRect(240, 50, 91, 17))
        self.radioButtonDecisionTreeRegression.setObjectName("radioButtonDecisionTreeRegression")
        self.radioButtonLogisticRegression = QtWidgets.QRadioButton(self.groupBoxRegression)
        self.radioButtonLogisticRegression.setGeometry(QtCore.QRect(120, 50, 121, 17))
        self.radioButtonLogisticRegression.setObjectName("radioButtonLogisticRegression")
        self.radioButtonLinearRegression = QtWidgets.QRadioButton(self.groupBoxRegression)
        self.radioButtonLinearRegression.setGeometry(QtCore.QRect(10, 50, 111, 17))
        self.radioButtonLinearRegression.setObjectName("radioButtonLinearRegression")
        self.label_14 = QtWidgets.QLabel(self.groupBoxRegression)
        self.label_14.setGeometry(QtCore.QRect(100, 90, 141, 16))
        self.label_14.setObjectName("label_14")
        self.labelTestDataAccuracyRegression = QtWidgets.QLabel(self.groupBoxRegression)
        self.labelTestDataAccuracyRegression.setGeometry(QtCore.QRect(240, 90, 47, 16))
        self.labelTestDataAccuracyRegression.setText("")
        self.labelTestDataAccuracyRegression.setObjectName("labelTestDataAccuracyRegression")
        self.pushButtonRegressionTrain = QtWidgets.QPushButton(self.groupBoxRegression)
        self.pushButtonRegressionTrain.setGeometry(QtCore.QRect(360, 90, 71, 21))
        self.pushButtonRegressionTrain.setObjectName("pushButtonRegressionTrain")
        self.groupBoxKFoldReggression = QtWidgets.QGroupBox(self.groupBoxRegression)
        self.groupBoxKFoldReggression.setGeometry(QtCore.QRect(530, 20, 211, 81))
        self.groupBoxKFoldReggression.setObjectName("groupBoxKFoldReggression")
        self.spinBoxNFoldRegression = QtWidgets.QSpinBox(self.groupBoxKFoldReggression)
        self.spinBoxNFoldRegression.setGeometry(QtCore.QRect(140, 10, 51, 22))
        self.spinBoxNFoldRegression.setObjectName("spinBoxNFoldRegression")
        self.label_16 = QtWidgets.QLabel(self.groupBoxKFoldReggression)
        self.label_16.setGeometry(QtCore.QRect(60, 10, 61, 21))
        self.label_16.setObjectName("label_16")
        self.pushButtonApplyKFoldRegression = QtWidgets.QPushButton(self.groupBoxKFoldReggression)
        self.pushButtonApplyKFoldRegression.setGeometry(QtCore.QRect(120, 40, 71, 23))
        self.pushButtonApplyKFoldRegression.setObjectName("pushButtonApplyKFoldRegression")
        self.groupBoxGraphs = QtWidgets.QGroupBox(self.tabTraining)
        self.groupBoxGraphs.setGeometry(QtCore.QRect(10, 280, 781, 551))
        self.groupBoxGraphs.setObjectName("groupBoxGraphs")
        self.labelPredictReal = QtWidgets.QLabel(self.groupBoxGraphs)
        self.labelPredictReal.setGeometry(QtCore.QRect(60, 40, 311, 231))
        self.labelPredictReal.setText("")
        self.labelPredictReal.setScaledContents(True)
        self.labelPredictReal.setObjectName("labelPredictReal")
        self.labelConfusionMatrix = QtWidgets.QLabel(self.groupBoxGraphs)
        self.labelConfusionMatrix.setGeometry(QtCore.QRect(450, 40, 311, 231))
        self.labelConfusionMatrix.setText("")
        self.labelConfusionMatrix.setScaledContents(True)
        self.labelConfusionMatrix.setObjectName("labelConfusionMatrix")
        self.labelRocCurve = QtWidgets.QLabel(self.groupBoxGraphs)
        self.labelRocCurve.setGeometry(QtCore.QRect(240, 300, 311, 231))
        self.labelRocCurve.setText("")
        self.labelRocCurve.setScaledContents(True)
        self.labelRocCurve.setObjectName("labelRocCurve")
        self.tabWidget.addTab(self.tabTraining, "")
        self.tabEnsemble = QtWidgets.QWidget()
        self.tabEnsemble.setObjectName("tabEnsemble")
        self.groupBoxVoting = QtWidgets.QGroupBox(self.tabEnsemble)
        self.groupBoxVoting.setGeometry(QtCore.QRect(450, 10, 301, 241))
        self.groupBoxVoting.setObjectName("groupBoxVoting")
        self.checkBoxDecisionTreeVoting = QtWidgets.QCheckBox(self.groupBoxVoting)
        self.checkBoxDecisionTreeVoting.setGeometry(QtCore.QRect(50, 100, 91, 17))
        self.checkBoxDecisionTreeVoting.setObjectName("checkBoxDecisionTreeVoting")
        self.checkBoxKNNVoting = QtWidgets.QCheckBox(self.groupBoxVoting)
        self.checkBoxKNNVoting.setGeometry(QtCore.QRect(140, 100, 70, 17))
        self.checkBoxKNNVoting.setObjectName("checkBoxKNNVoting")
        self.checkBoxRFCVoting = QtWidgets.QCheckBox(self.groupBoxVoting)
        self.checkBoxRFCVoting.setGeometry(QtCore.QRect(190, 100, 70, 17))
        self.checkBoxRFCVoting.setObjectName("checkBoxRFCVoting")
        self.pushButtonVoting = QtWidgets.QPushButton(self.groupBoxVoting)
        self.pushButtonVoting.setGeometry(QtCore.QRect(110, 150, 75, 23))
        self.pushButtonVoting.setObjectName("pushButtonVoting")
        self.groupBoxGraphEnsemble = QtWidgets.QGroupBox(self.tabEnsemble)
        self.groupBoxGraphEnsemble.setGeometry(QtCore.QRect(10, 520, 791, 281))
        self.groupBoxGraphEnsemble.setObjectName("groupBoxGraphEnsemble")
        self.labelConfusionMatrixEnsemble = QtWidgets.QLabel(self.groupBoxGraphEnsemble)
        self.labelConfusionMatrixEnsemble.setGeometry(QtCore.QRect(30, 30, 371, 231))
        self.labelConfusionMatrixEnsemble.setText("")
        self.labelConfusionMatrixEnsemble.setScaledContents(True)
        self.labelConfusionMatrixEnsemble.setObjectName("labelConfusionMatrixEnsemble")
        self.labelROCCurveEnsemble = QtWidgets.QLabel(self.groupBoxGraphEnsemble)
        self.labelROCCurveEnsemble.setGeometry(QtCore.QRect(440, 30, 341, 231))
        self.labelROCCurveEnsemble.setText("")
        self.labelROCCurveEnsemble.setScaledContents(True)
        self.labelROCCurveEnsemble.setObjectName("labelROCCurveEnsemble")
        self.groupBoxBagging = QtWidgets.QGroupBox(self.tabEnsemble)
        self.groupBoxBagging.setGeometry(QtCore.QRect(70, 10, 301, 241))
        self.groupBoxBagging.setObjectName("groupBoxBagging")
        self.radioButtonNaiveBayesBagging = QtWidgets.QRadioButton(self.groupBoxBagging)
        self.radioButtonNaiveBayesBagging.setGeometry(QtCore.QRect(110, 60, 82, 17))
        self.radioButtonNaiveBayesBagging.setObjectName("radioButtonNaiveBayesBagging")
        self.radioButtonDecisionTreeBagging = QtWidgets.QRadioButton(self.groupBoxBagging)
        self.radioButtonDecisionTreeBagging.setGeometry(QtCore.QRect(110, 80, 101, 17))
        self.radioButtonDecisionTreeBagging.setObjectName("radioButtonDecisionTreeBagging")
        self.radioButtonKNNBagging = QtWidgets.QRadioButton(self.groupBoxBagging)
        self.radioButtonKNNBagging.setGeometry(QtCore.QRect(110, 100, 82, 17))
        self.radioButtonKNNBagging.setObjectName("radioButtonKNNBagging")
        self.pushButtonBagging = QtWidgets.QPushButton(self.groupBoxBagging)
        self.pushButtonBagging.setGeometry(QtCore.QRect(110, 130, 75, 23))
        self.pushButtonBagging.setObjectName("pushButtonBagging")
        self.groupBoxStacking = QtWidgets.QGroupBox(self.tabEnsemble)
        self.groupBoxStacking.setGeometry(QtCore.QRect(70, 250, 301, 241))
        self.groupBoxStacking.setObjectName("groupBoxStacking")
        self.pushButtonStacking = QtWidgets.QPushButton(self.groupBoxStacking)
        self.pushButtonStacking.setGeometry(QtCore.QRect(110, 130, 75, 23))
        self.pushButtonStacking.setObjectName("pushButtonStacking")
        self.checkBoxDecisionTreeStacking = QtWidgets.QCheckBox(self.groupBoxStacking)
        self.checkBoxDecisionTreeStacking.setGeometry(QtCore.QRect(50, 80, 91, 17))
        self.checkBoxDecisionTreeStacking.setObjectName("checkBoxDecisionTreeStacking")
        self.checkBoxRFCStacking = QtWidgets.QCheckBox(self.groupBoxStacking)
        self.checkBoxRFCStacking.setGeometry(QtCore.QRect(190, 80, 70, 17))
        self.checkBoxRFCStacking.setObjectName("checkBoxRFCStacking")
        self.checkBoxKNNStacking = QtWidgets.QCheckBox(self.groupBoxStacking)
        self.checkBoxKNNStacking.setGeometry(QtCore.QRect(140, 80, 41, 17))
        self.checkBoxKNNStacking.setObjectName("checkBoxKNNStacking")
        self.groupBoxBoosting = QtWidgets.QGroupBox(self.tabEnsemble)
        self.groupBoxBoosting.setGeometry(QtCore.QRect(450, 250, 301, 241))
        self.groupBoxBoosting.setObjectName("groupBoxBoosting")
        self.radioButtonGBMBoosting = QtWidgets.QRadioButton(self.groupBoxBoosting)
        self.radioButtonGBMBoosting.setGeometry(QtCore.QRect(100, 60, 82, 17))
        self.radioButtonGBMBoosting.setObjectName("radioButtonGBMBoosting")
        self.pushButtonBoosting = QtWidgets.QPushButton(self.groupBoxBoosting)
        self.pushButtonBoosting.setGeometry(QtCore.QRect(100, 130, 75, 23))
        self.pushButtonBoosting.setObjectName("pushButtonBoosting")
        self.radioButtonXGBoostBoosting = QtWidgets.QRadioButton(self.groupBoxBoosting)
        self.radioButtonXGBoostBoosting.setGeometry(QtCore.QRect(100, 80, 101, 17))
        self.radioButtonXGBoostBoosting.setObjectName("radioButtonXGBoostBoosting")
        self.radioButtonCatBoostBoosting = QtWidgets.QRadioButton(self.groupBoxBoosting)
        self.radioButtonCatBoostBoosting.setGeometry(QtCore.QRect(100, 100, 82, 17))
        self.radioButtonCatBoostBoosting.setObjectName("radioButtonCatBoostBoosting")
        self.label_6 = QtWidgets.QLabel(self.tabEnsemble)
        self.label_6.setGeometry(QtCore.QRect(320, 500, 61, 16))
        self.label_6.setObjectName("label_6")
        self.labelAccuracyEnsemble = QtWidgets.QLabel(self.tabEnsemble)
        self.labelAccuracyEnsemble.setGeometry(QtCore.QRect(386, 500, 101, 20))
        self.labelAccuracyEnsemble.setText("")
        self.labelAccuracyEnsemble.setObjectName("labelAccuracyEnsemble")
        self.tabWidget.addTab(self.tabEnsemble, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBoxModelTuning = QtWidgets.QGroupBox(self.tab)
        self.groupBoxModelTuning.setGeometry(QtCore.QRect(10, 0, 791, 431))
        self.groupBoxModelTuning.setObjectName("groupBoxModelTuning")
        self.groupBoxGridSearchCV = QtWidgets.QGroupBox(self.groupBoxModelTuning)
        self.groupBoxGridSearchCV.setGeometry(QtCore.QRect(10, 20, 381, 401))
        self.groupBoxGridSearchCV.setObjectName("groupBoxGridSearchCV")
        self.radioButtonKNNGridSearchCV = QtWidgets.QRadioButton(self.groupBoxGridSearchCV)
        self.radioButtonKNNGridSearchCV.setGeometry(QtCore.QRect(60, 50, 82, 17))
        self.radioButtonKNNGridSearchCV.setObjectName("radioButtonKNNGridSearchCV")
        self.radioButtonDecisionTreeGridSearchCV = QtWidgets.QRadioButton(self.groupBoxGridSearchCV)
        self.radioButtonDecisionTreeGridSearchCV.setGeometry(QtCore.QRect(60, 80, 101, 17))
        self.radioButtonDecisionTreeGridSearchCV.setObjectName("radioButtonDecisionTreeGridSearchCV")
        self.radioButtonRandomForestTreeGridSearchCV = QtWidgets.QRadioButton(self.groupBoxGridSearchCV)
        self.radioButtonRandomForestTreeGridSearchCV.setGeometry(QtCore.QRect(60, 110, 131, 17))
        self.radioButtonRandomForestTreeGridSearchCV.setObjectName("radioButtonRandomForestTreeGridSearchCV")
        self.radioButtonSVMGridSearchCV = QtWidgets.QRadioButton(self.groupBoxGridSearchCV)
        self.radioButtonSVMGridSearchCV.setGeometry(QtCore.QRect(60, 140, 141, 17))
        self.radioButtonSVMGridSearchCV.setObjectName("radioButtonSVMGridSearchCV")
        self.pushButtonGridSearchCV = QtWidgets.QPushButton(self.groupBoxGridSearchCV)
        self.pushButtonGridSearchCV.setGeometry(QtCore.QRect(210, 150, 75, 31))
        self.pushButtonGridSearchCV.setObjectName("pushButtonGridSearchCV")
        self.label_19 = QtWidgets.QLabel(self.groupBoxGridSearchCV)
        self.label_19.setGeometry(QtCore.QRect(70, 210, 101, 16))
        self.label_19.setObjectName("label_19")
        self.listWidgetGridSearchBestParams = QtWidgets.QListWidget(self.groupBoxGridSearchCV)
        self.listWidgetGridSearchBestParams.setGeometry(QtCore.QRect(190, 210, 131, 81))
        self.listWidgetGridSearchBestParams.setObjectName("listWidgetGridSearchBestParams")
        self.label_21 = QtWidgets.QLabel(self.groupBoxGridSearchCV)
        self.label_21.setGeometry(QtCore.QRect(70, 320, 161, 16))
        self.label_21.setObjectName("label_21")
        self.labelGridSearchAccuracy = QtWidgets.QLabel(self.groupBoxGridSearchCV)
        self.labelGridSearchAccuracy.setGeometry(QtCore.QRect(230, 320, 91, 16))
        self.labelGridSearchAccuracy.setText("")
        self.labelGridSearchAccuracy.setObjectName("labelGridSearchAccuracy")
        self.groupBoxRandomSearch = QtWidgets.QGroupBox(self.groupBoxModelTuning)
        self.groupBoxRandomSearch.setGeometry(QtCore.QRect(400, 20, 381, 401))
        self.groupBoxRandomSearch.setObjectName("groupBoxRandomSearch")
        self.radioButtonKNNRandomSearch = QtWidgets.QRadioButton(self.groupBoxRandomSearch)
        self.radioButtonKNNRandomSearch.setGeometry(QtCore.QRect(50, 50, 82, 17))
        self.radioButtonKNNRandomSearch.setObjectName("radioButtonKNNRandomSearch")
        self.radioButtonRandomForestTreeRandomSearch = QtWidgets.QRadioButton(self.groupBoxRandomSearch)
        self.radioButtonRandomForestTreeRandomSearch.setGeometry(QtCore.QRect(50, 110, 131, 17))
        self.radioButtonRandomForestTreeRandomSearch.setObjectName("radioButtonRandomForestTreeRandomSearch")
        self.pushButtonRandomSearchCV = QtWidgets.QPushButton(self.groupBoxRandomSearch)
        self.pushButtonRandomSearchCV.setGeometry(QtCore.QRect(200, 140, 75, 31))
        self.pushButtonRandomSearchCV.setObjectName("pushButtonRandomSearchCV")
        self.radioButtonDecisionTreeRandomSearch = QtWidgets.QRadioButton(self.groupBoxRandomSearch)
        self.radioButtonDecisionTreeRandomSearch.setGeometry(QtCore.QRect(50, 80, 101, 17))
        self.radioButtonDecisionTreeRandomSearch.setObjectName("radioButtonDecisionTreeRandomSearch")
        self.radioButtonSVMRandomSearch = QtWidgets.QRadioButton(self.groupBoxRandomSearch)
        self.radioButtonSVMRandomSearch.setGeometry(QtCore.QRect(50, 140, 141, 17))
        self.radioButtonSVMRandomSearch.setObjectName("radioButtonSVMRandomSearch")
        self.label_20 = QtWidgets.QLabel(self.groupBoxRandomSearch)
        self.label_20.setGeometry(QtCore.QRect(60, 200, 111, 16))
        self.label_20.setObjectName("label_20")
        self.listWidgetRandomSearchParams = QtWidgets.QListWidget(self.groupBoxRandomSearch)
        self.listWidgetRandomSearchParams.setGeometry(QtCore.QRect(180, 200, 131, 81))
        self.listWidgetRandomSearchParams.setObjectName("listWidgetRandomSearchParams")
        self.label_22 = QtWidgets.QLabel(self.groupBoxRandomSearch)
        self.label_22.setGeometry(QtCore.QRect(70, 330, 171, 16))
        self.label_22.setObjectName("label_22")
        self.labelRandomSearchAccuracy = QtWidgets.QLabel(self.groupBoxRandomSearch)
        self.labelRandomSearchAccuracy.setGeometry(QtCore.QRect(250, 330, 71, 16))
        self.labelRandomSearchAccuracy.setText("")
        self.labelRandomSearchAccuracy.setObjectName("labelRandomSearchAccuracy")
        self.groupBoxModelTunedGraphs = QtWidgets.QGroupBox(self.tab)
        self.groupBoxModelTunedGraphs.setGeometry(QtCore.QRect(10, 450, 791, 391))
        self.groupBoxModelTunedGraphs.setObjectName("groupBoxModelTunedGraphs")
        self.labelModelTuningConfusionMatrix = QtWidgets.QLabel(self.groupBoxModelTunedGraphs)
        self.labelModelTuningConfusionMatrix.setGeometry(QtCore.QRect(40, 80, 321, 241))
        self.labelModelTuningConfusionMatrix.setText("")
        self.labelModelTuningConfusionMatrix.setScaledContents(True)
        self.labelModelTuningConfusionMatrix.setObjectName("labelModelTuningConfusionMatrix")
        self.labelModelTuningRocCurve = QtWidgets.QLabel(self.groupBoxModelTunedGraphs)
        self.labelModelTuningRocCurve.setGeometry(QtCore.QRect(430, 80, 321, 241))
        self.labelModelTuningRocCurve.setText("")
        self.labelModelTuningRocCurve.setScaledContents(True)
        self.labelModelTuningRocCurve.setObjectName("labelModelTuningRocCurve")
        self.tabWidget.addTab(self.tab, "")
        self.tabNeuralNetworks = QtWidgets.QWidget()
        self.tabNeuralNetworks.setObjectName("tabNeuralNetworks")
        self.groupBoxANN = QtWidgets.QGroupBox(self.tabNeuralNetworks)
        self.groupBoxANN.setGeometry(QtCore.QRect(10, 10, 791, 381))
        self.groupBoxANN.setObjectName("groupBoxANN")
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBoxANN)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 20, 381, 341))
        self.groupBox_2.setObjectName("groupBox_2")
        self.spinBoxEpoch = QtWidgets.QSpinBox(self.groupBox_2)
        self.spinBoxEpoch.setGeometry(QtCore.QRect(110, 60, 42, 22))
        self.spinBoxEpoch.setMinimum(1)
        self.spinBoxEpoch.setMaximum(10000)
        self.spinBoxEpoch.setProperty("value", 1)
        self.spinBoxEpoch.setObjectName("spinBoxEpoch")
        self.label_28 = QtWidgets.QLabel(self.groupBox_2)
        self.label_28.setGeometry(QtCore.QRect(40, 62, 47, 21))
        self.label_28.setObjectName("label_28")
        self.pushButtonDeepModelTraining = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButtonDeepModelTraining.setGeometry(QtCore.QRect(290, 150, 75, 23))
        self.pushButtonDeepModelTraining.setObjectName("pushButtonDeepModelTraining")
        self.textboxModelName = QtWidgets.QPlainTextEdit(self.groupBox_2)
        self.textboxModelName.setGeometry(QtCore.QRect(270, 60, 101, 31))
        self.textboxModelName.setObjectName("textboxModelName")
        self.label_30 = QtWidgets.QLabel(self.groupBox_2)
        self.label_30.setGeometry(QtCore.QRect(200, 62, 61, 31))
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.groupBox_2)
        self.label_31.setGeometry(QtCore.QRect(60, 250, 41, 16))
        self.label_31.setObjectName("label_31")
        self.labelDeepModelAccuracy = QtWidgets.QLabel(self.groupBox_2)
        self.labelDeepModelAccuracy.setGeometry(QtCore.QRect(120, 250, 121, 16))
        self.labelDeepModelAccuracy.setText("")
        self.labelDeepModelAccuracy.setObjectName("labelDeepModelAccuracy")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBoxANN)
        self.groupBox_3.setGeometry(QtCore.QRect(400, 20, 381, 341))
        self.groupBox_3.setObjectName("groupBox_3")
        self.comboBoxReadyModel = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBoxReadyModel.setGeometry(QtCore.QRect(90, 70, 261, 31))
        self.comboBoxReadyModel.setObjectName("comboBoxReadyModel")
        self.label_32 = QtWidgets.QLabel(self.groupBox_3)
        self.label_32.setGeometry(QtCore.QRect(20, 80, 61, 16))
        self.label_32.setObjectName("label_32")
        self.pushButtonUseReadyModel = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButtonUseReadyModel.setGeometry(QtCore.QRect(280, 140, 75, 23))
        self.pushButtonUseReadyModel.setObjectName("pushButtonUseReadyModel")
        self.label_33 = QtWidgets.QLabel(self.groupBox_3)
        self.label_33.setGeometry(QtCore.QRect(30, 250, 41, 16))
        self.label_33.setObjectName("label_33")
        self.labelReadyModelAccuracy = QtWidgets.QLabel(self.groupBox_3)
        self.labelReadyModelAccuracy.setGeometry(QtCore.QRect(90, 250, 121, 16))
        self.labelReadyModelAccuracy.setText("")
        self.labelReadyModelAccuracy.setObjectName("labelReadyModelAccuracy")
        self.groupBox = QtWidgets.QGroupBox(self.tabNeuralNetworks)
        self.groupBox.setGeometry(QtCore.QRect(10, 400, 791, 431))
        self.groupBox.setObjectName("groupBox")
        self.labelDeepModelTrainLoss = QtWidgets.QLabel(self.groupBox)
        self.labelDeepModelTrainLoss.setGeometry(QtCore.QRect(50, 20, 271, 191))
        self.labelDeepModelTrainLoss.setText("")
        self.labelDeepModelTrainLoss.setScaledContents(True)
        self.labelDeepModelTrainLoss.setObjectName("labelDeepModelTrainLoss")
        self.labelDeepModelRocCurve = QtWidgets.QLabel(self.groupBox)
        self.labelDeepModelRocCurve.setGeometry(QtCore.QRect(450, 20, 271, 191))
        self.labelDeepModelRocCurve.setText("")
        self.labelDeepModelRocCurve.setScaledContents(True)
        self.labelDeepModelRocCurve.setObjectName("labelDeepModelRocCurve")
        self.labelDeepModelConfusionMatrix = QtWidgets.QLabel(self.groupBox)
        self.labelDeepModelConfusionMatrix.setGeometry(QtCore.QRect(230, 220, 271, 191))
        self.labelDeepModelConfusionMatrix.setText("")
        self.labelDeepModelConfusionMatrix.setScaledContents(True)
        self.labelDeepModelConfusionMatrix.setObjectName("labelDeepModelConfusionMatrix")
        self.tabWidget.addTab(self.tabNeuralNetworks, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 814, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BEKA"))
        self.groupBoxDataLoading.setTitle(_translate("MainWindow", "Veri Yükleme"))
        self.pushButtonSelectDataPath.setText(_translate("MainWindow", "Dosya Aç"))
        self.groupBoxPreprocessing.setTitle(_translate("MainWindow", "Ön İşlemler"))
        self.groupBoxTargetFeatures.setTitle(_translate("MainWindow", "Hedef Öznitelik"))
        self.label.setText(_translate("MainWindow", "Öznitelikler"))
        self.pushButtonTargetFeature.setText(_translate("MainWindow", "Seç"))
        self.pushButtonDeleteFeatures.setText(_translate("MainWindow", "Seç"))
        self.label_23.setText(_translate("MainWindow", "Çıkartılacak Öznitelik"))
        self.groupBoxStandardization.setTitle(_translate("MainWindow", "Standartizasyon"))
        self.radioButtonStandardization.setText(_translate("MainWindow", "Standardizasyon"))
        self.radioButtonNormasilation.setText(_translate("MainWindow", "Normalizasyon"))
        self.radioButtonMinMaxScaler.setText(_translate("MainWindow", "Min-Max Scaler"))
        self.pushButtonApplyStandardization.setText(_translate("MainWindow", "Uygula"))
        self.label_17.setText(_translate("MainWindow", "Min"))
        self.label_18.setText(_translate("MainWindow", "Max"))
        self.groupBoxOutlierDatas.setTitle(_translate("MainWindow", "Aykırı Veriler"))
        self.radioButtonSuppressionMethod.setText(_translate("MainWindow", "Baskılama Yöntemi"))
        self.pushButtonApplyOutlierData.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxMissingValues.setTitle(_translate("MainWindow", "Eksik Verilerle İlgili İşlemler"))
        self.radioButtonMeanImport.setText(_translate("MainWindow", "Ortalamayla Doldur"))
        self.radioButtonMedianImport.setText(_translate("MainWindow", "Medyanla Doldur"))
        self.radioButtonDeleteMissingValues.setText(_translate("MainWindow", "Veri setinden çıkart"))
        self.pushButtonMissingValue.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxDataSetInformation.setTitle(_translate("MainWindow", "Veri Seti Bilgileri"))
        self.label_2.setText(_translate("MainWindow", "Eksik Veri Sayısı: "))
        self.label_3.setText(_translate("MainWindow", "Öznitelik Sayısı:"))
        self.groupBoxPCA.setTitle(_translate("MainWindow", "PCA Uygulanması"))
        self.pushButtonPCA.setText(_translate("MainWindow", "Uygula"))
        self.label_27.setText(_translate("MainWindow", "N:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.DataPreprocessing), _translate("MainWindow", "Veri Önişleme"))
        self.groupBoxTrainTestSplit.setTitle(_translate("MainWindow", "Eğitim - Test Ayrımı"))
        self.groupBoxHoldout.setTitle(_translate("MainWindow", "Holdout"))
        self.label_4.setText(_translate("MainWindow", "Random State:"))
        self.label_5.setText(_translate("MainWindow", "Test Size:"))
        self.pushButtonAppyHoldout.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxSplittedData.setTitle(_translate("MainWindow", "Ayrılmış Veriler"))
        self.label_7.setText(_translate("MainWindow", "Train X"))
        self.label_8.setText(_translate("MainWindow", "Train Y"))
        self.label_9.setText(_translate("MainWindow", "Test X"))
        self.label_10.setText(_translate("MainWindow", "Test Y"))
        self.label_11.setText(_translate("MainWindow", "Eğitim için ayrılan veri sayısı: "))
        self.label_12.setText(_translate("MainWindow", "Test için ayrılan veri sayısı:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabTrainTestSplit), _translate("MainWindow", "Eğitim - Test Ayrımı"))
        self.groupBoxClassification.setTitle(_translate("MainWindow", "Sınıflandırma"))
        self.radioButtonKNNClassifier.setText(_translate("MainWindow", "KNN"))
        self.radioButtonDecisionTreeClassifier.setText(_translate("MainWindow", "Decision Tree"))
        self.radioButtonRandomForestTreeClassifier.setText(_translate("MainWindow", "Random Forest Tree"))
        self.radioButtonNaiveBayesClassifier.setText(_translate("MainWindow", "Naive Bayes"))
        self.pushButtonClassificationTrain.setText(_translate("MainWindow", "Eğit"))
        self.label_13.setText(_translate("MainWindow", "Test verisi accuracy değeri:"))
        self.groupBoxKFoldClassification.setTitle(_translate("MainWindow", "K-Fold"))
        self.label_15.setText(_translate("MainWindow", "Fold Sayısı:"))
        self.pushButtonApplyKFoldClassification.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxRegression.setTitle(_translate("MainWindow", "Tahmin"))
        self.radioButtonSVMRegression.setText(_translate("MainWindow", "Support Vector Machine"))
        self.radioButtonDecisionTreeRegression.setText(_translate("MainWindow", "Decision Tree"))
        self.radioButtonLogisticRegression.setText(_translate("MainWindow", "Logistic Regresyon"))
        self.radioButtonLinearRegression.setText(_translate("MainWindow", "Lineer Regresyon"))
        self.label_14.setText(_translate("MainWindow", "Test verisi MSE değeri:"))
        self.pushButtonRegressionTrain.setText(_translate("MainWindow", "Eğit"))
        self.groupBoxKFoldReggression.setTitle(_translate("MainWindow", "K-Fold"))
        self.label_16.setText(_translate("MainWindow", "Fold Sayısı:"))
        self.pushButtonApplyKFoldRegression.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxGraphs.setTitle(_translate("MainWindow", "Grafikler"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabTraining), _translate("MainWindow", "Eğitim"))
        self.groupBoxVoting.setTitle(_translate("MainWindow", "Voting"))
        self.checkBoxDecisionTreeVoting.setText(_translate("MainWindow", "Decision Tree"))
        self.checkBoxKNNVoting.setText(_translate("MainWindow", "KNN"))
        self.checkBoxRFCVoting.setText(_translate("MainWindow", "RFC"))
        self.pushButtonVoting.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxGraphEnsemble.setTitle(_translate("MainWindow", "Grafikler"))
        self.groupBoxBagging.setTitle(_translate("MainWindow", "Bagging"))
        self.radioButtonNaiveBayesBagging.setText(_translate("MainWindow", "Naive Bayes"))
        self.radioButtonDecisionTreeBagging.setText(_translate("MainWindow", "Decision Tree"))
        self.radioButtonKNNBagging.setText(_translate("MainWindow", "KNN"))
        self.pushButtonBagging.setText(_translate("MainWindow", "Uygula"))
        self.groupBoxStacking.setTitle(_translate("MainWindow", "Stacking"))
        self.pushButtonStacking.setText(_translate("MainWindow", "Uygula"))
        self.checkBoxDecisionTreeStacking.setText(_translate("MainWindow", "Decision Tree"))
        self.checkBoxRFCStacking.setText(_translate("MainWindow", "RFC"))
        self.checkBoxKNNStacking.setText(_translate("MainWindow", "KNN"))
        self.groupBoxBoosting.setTitle(_translate("MainWindow", "Boosting"))
        self.radioButtonGBMBoosting.setText(_translate("MainWindow", "GBM"))
        self.pushButtonBoosting.setText(_translate("MainWindow", "Uygula"))
        self.radioButtonXGBoostBoosting.setText(_translate("MainWindow", "XGBoost"))
        self.radioButtonCatBoostBoosting.setText(_translate("MainWindow", "CatBoost"))
        self.label_6.setText(_translate("MainWindow", "Accuracy:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabEnsemble), _translate("MainWindow", "Toplu Öğrenme"))
        self.groupBoxModelTuning.setTitle(_translate("MainWindow", "Model Tuning"))
        self.groupBoxGridSearchCV.setTitle(_translate("MainWindow", "Grid Search CV"))
        self.radioButtonKNNGridSearchCV.setText(_translate("MainWindow", "KNN"))
        self.radioButtonDecisionTreeGridSearchCV.setText(_translate("MainWindow", "Decision Tree"))
        self.radioButtonRandomForestTreeGridSearchCV.setText(_translate("MainWindow", "Random Forest Tree"))
        self.radioButtonSVMGridSearchCV.setText(_translate("MainWindow", "Support Vector Machine"))
        self.pushButtonGridSearchCV.setText(_translate("MainWindow", "Uygula"))
        self.label_19.setText(_translate("MainWindow", "En İyi Parametreler"))
        self.label_21.setText(_translate("MainWindow", "En iyi parametlerden dönen acc:"))
        self.groupBoxRandomSearch.setTitle(_translate("MainWindow", "Random Search CV"))
        self.radioButtonKNNRandomSearch.setText(_translate("MainWindow", "KNN"))
        self.radioButtonRandomForestTreeRandomSearch.setText(_translate("MainWindow", "Random Forest Tree"))
        self.pushButtonRandomSearchCV.setText(_translate("MainWindow", "Uygula"))
        self.radioButtonDecisionTreeRandomSearch.setText(_translate("MainWindow", "Decision Tree"))
        self.radioButtonSVMRandomSearch.setText(_translate("MainWindow", "Support Vector Machine"))
        self.label_20.setText(_translate("MainWindow", "Random Parametreler"))
        self.label_22.setText(_translate("MainWindow", "Random parametlerden dönen acc:"))
        self.groupBoxModelTunedGraphs.setTitle(_translate("MainWindow", "Grafikler"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Grid Search - Random Search"))
        self.groupBoxANN.setTitle(_translate("MainWindow", "Yapay Sinir Ağları"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Model Eğitimi"))
        self.label_28.setText(_translate("MainWindow", "Epoch:"))
        self.pushButtonDeepModelTraining.setText(_translate("MainWindow", "Eğit"))
        self.label_30.setText(_translate("MainWindow", "Model Adı:"))
        self.label_31.setText(_translate("MainWindow", "Acc:"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Hazır Model Kullanımı"))
        self.label_32.setText(_translate("MainWindow", "Model Adı:"))
        self.pushButtonUseReadyModel.setText(_translate("MainWindow", "Eğit"))
        self.label_33.setText(_translate("MainWindow", "Acc:"))
        self.groupBox.setTitle(_translate("MainWindow", "Grafikler"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabNeuralNetworks), _translate("MainWindow", "Yapay Sinir Ağları"))
        # Load
        model_path = "./Models/"

        models = glob.glob(model_path + "*")
        models = [x.replace('\\', '/') for x in models]
        for model in models:
            self.comboBoxReadyModel.addItem(model)
        # Signals
        self.pushButtonSelectDataPath.clicked.connect(self.openFile)
        self.pushButtonTargetFeature.clicked.connect(self.extractTargetFeature)
        self.pushButtonApplyStandardization.clicked.connect(self.whichStandardisation)
        self.pushButtonMissingValue.clicked.connect(self.missinValuesMean)
        self.pushButtonAppyHoldout.clicked.connect(self.train_test_split_operations)
        self.pushButtonClassificationTrain.clicked.connect(self.classificationClicked)
        self.pushButtonRegressionTrain.clicked.connect(self.regressionClicked)
        self.pushButtonApplyKFoldClassification.clicked.connect(self.KFoldClassification)
        self.pushButtonApplyKFoldRegression.clicked.connect(self.KFoldRegression)
        self.pushButtonBagging.clicked.connect(self.BaggingButtonClick)
        self.pushButtonBoosting.clicked.connect(self.Boosting)
        self.pushButtonStacking.clicked.connect(self.Stacking)
        self.pushButtonVoting.clicked.connect(self.Voting)
        self.pushButtonGridSearchCV.clicked.connect(self.pushButtonGrid)
        self.pushButtonRandomSearchCV.clicked.connect(self.pushButtonRandom)
        self.pushButtonDeleteFeatures.clicked.connect(self.pushButtonDeleteFeaturesClicked)
        self.pushButtonPCA.clicked.connect(self.pushButtonPCAClicked)
        self.pushButtonDeepModelTraining.clicked.connect(self.deepLearning)
        self.pushButtonUseReadyModel.clicked.connect(self.useReadyModelClicked)
        self.pushButtonApplyOutlierData.clicked.connect(self.outlierOpearations)

    def outlierOpearations(self):
        clf = LocalOutlierFactor()

        clf.fit_predict(self.X)

        df_scores = clf.negative_outlier_factor_

        esik_deger = np.sort(df_scores)[10]
        print(esik_deger)

        outlier = df_scores > esik_deger

        yeni_data = self.X[outlier]

        print(yeni_data)
    def useReadyModelClicked(self):
        try:
            model = load_model(self.comboBoxReadyModel.currentText())

            y_train = to_categorical(self.y_train)
            y_test = to_categorical(self.y_test)

            history = model.fit(self.X_train, y_train, epochs=99, validation_split=0.3, shuffle=True)
            model.save(self.comboBoxReadyModel.currentText())
            self.comboBoxReadyModel.addItem(str(self.textboxModelName.toPlainText()))
            history_df = pd.DataFrame(history.history)
            print(history_df)

            y_pred = model.predict(self.X_test)

            self.labelReadyModelAccuracy.setText(str(history_df["val_binary_accuracy"].mean()))

            y_test = np.argmax(y_test, axis=1)
            y_pred = np.argmax(y_pred, axis=1)
            conf_matr = confusion_matrix(y_test, y_pred)
            self.roc_curve(y_pred, "My_Deep_Learning", "deep_learning")
            self.pixmap = QPixmap("./Plots/" + "My_Deep_Learning_deep_learning" + "roc_curve.png")
            self.labelDeepModelRocCurve.setPixmap(self.pixmap)
            self.createConfusionMatrix(conf_matr, "my_deep_learning", "deep_learning")
            self.pixmap = QPixmap("./Plots/" + "my_deep_learning_deep_learning" + "confusion_matrix.png")
            self.labelDeepModelConfusionMatrix.setPixmap(self.pixmap)

            self.DeepLearningAccGraph(history)
            self.pixmap = QPixmap("./Plots/DeepLearningAccLoosGraph.png")
            self.labelDeepModelTrainLoss.setPixmap(self.pixmap)
        except Exception as e:
            print(e)

    def deepLearning(self):

        try:
            n_cols = len(np.unique(self.y))

            y_train = to_categorical(self.y_train)
            y_test = to_categorical(self.y_test)
            model = keras.Sequential([

                layers.Dense(units=100, activation='relu'),
                layers.Dense(units=100, activation='relu'),

                layers.Dense(units=n_cols, activation='softmax'),
            ]
            )

            model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['binary_accuracy'])
            history = model.fit(self.X_train, y_train, epochs=self.spinBoxEpoch.value(), validation_split=0.3,
                                shuffle=True)
            model.save("./Models/" + self.textboxModelName.toPlainText())
            self.comboBoxReadyModel.addItem(str(self.textboxModelName.toPlainText()))
            history_df = pd.DataFrame(history.history)
            print(history_df)

            y_pred = model.predict(self.X_test)

            self.labelDeepModelAccuracy.setText(str(history_df["val_binary_accuracy"].mean()))

            y_test = np.argmax(y_test, axis=1)
            y_pred = np.argmax(y_pred, axis=1)
            conf_matr = confusion_matrix(y_test, y_pred)
            self.roc_curve(y_pred, "My_Deep_Learning", "deep_learning")
            self.pixmap = QPixmap("./Plots/" + "My_Deep_Learning_deep_learning" + "roc_curve.png")
            self.labelDeepModelRocCurve.setPixmap(self.pixmap)
            self.createConfusionMatrix(conf_matr, "my_deep_learning", "deep_learning")
            self.pixmap = QPixmap("./Plots/" + "my_deep_learning_deep_learning" + "confusion_matrix.png")
            self.labelDeepModelConfusionMatrix.setPixmap(self.pixmap)

            self.DeepLearningAccGraph(history)
            self.pixmap = QPixmap("./Plots/DeepLearningAccLoosGraph.png")
            self.labelDeepModelTrainLoss.setPixmap(self.pixmap)


        except Exception as e:
            print(e)

    def pushButtonPCAClicked(self):

        try:

            pca = PCA(n_components=self.spinBoxPCAN.value())
            self.X = pca.fit_transform(self.X)

            self.X = pd.DataFrame(self.X)

            print(self.X)

        except Exception as e:
            print(e)

    def pushButtonDeleteFeaturesClicked(self):
        try:

            self.all_data = self.all_data.drop([self.comboBoxFeatures.currentText()], axis=1)
            self.comboBoxTargetFeatures.clear()
            self.comboBoxFeatures.clear()
            self.showData()
            for i in self.all_data.columns:
                self.comboBoxTargetFeatures.addItem(i)
                self.comboBoxFeatures.addItem(i)
        except Exception as e:
            print(e)

    def pushButtonRandom(self):
        try:
            if self.radioButtonKNNRandomSearch.isChecked():
                params = {'n_neighbors': np.arange(1, 50)}
                best_params = self.RandomSearch(model=KNeighborsClassifier(), params=params)

                model = KNeighborsClassifier(n_neighbors=best_params["n_neighbors"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "KNN", "Random")
                self.pixmap = QPixmap("./Plots/" + "KNN_Random" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "KNN", "Random")
                self.pixmap = QPixmap("./Plots/" + "KNN_Random" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelRandomSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
            elif self.radioButtonSVMRandomSearch.isChecked():
                params = {'C': np.arange(1, 10)}
                best_params = self.RandomSearch(model=SVC(), params=params)

                model = SVC(C=best_params["C"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "SVM", "Random")
                self.pixmap = QPixmap("./Plots/" + "SVM_Random" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "SVM", "Random")
                self.pixmap = QPixmap("./Plots/" + "SVM_Random" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelRandomSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
            elif self.radioButtonRandomForestTreeRandomSearch.isChecked():
                params = {'max_depth': [2, 5, 8, 10], 'max_features': [2, 5, 8], 'n_estimators': [10, 500, 1000],
                          'min_samples_split': [2, 5, 10]}
                best_params = self.RandomSearch(model=RandomForestClassifier(), params=params)

                model = RandomForestClassifier(max_depth=best_params["max_depth"],
                                               max_features=best_params["max_features"],
                                               n_estimators=best_params["n_estimators"],
                                               min_samples_split=best_params["min_samples_split"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "RFC", "Random")
                self.pixmap = QPixmap("./Plots/" + "RFC_Random" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "RFC", "Random")
                self.pixmap = QPixmap("./Plots/" + "RFC_Random" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelRandomSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
            elif self.radioButtonDecisionTreeRandomSearch.isChecked():
                params = {'criterion': ['gini', 'entropy'], 'max_depth': np.arange(1, 50),
                          'min_samples_split': np.arange(1, 20)}
                best_params = self.RandomSearch(model=DecisionTreeClassifier(), params=params)

                model = DecisionTreeClassifier(criterion=best_params["criterion"],
                                               max_depth=best_params["max_depth"],
                                               min_samples_split=best_params["min_samples_split"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "DT", "Random")
                self.pixmap = QPixmap("./Plots/" + "DT_Random" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "DT", "Random")
                self.pixmap = QPixmap("./Plots/" + "DT_Random" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelRandomSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
        except Exception as e:
            print(e)

    def pushButtonGrid(self):
        try:
            if self.radioButtonKNNGridSearchCV.isChecked():
                params = {'n_neighbors': np.arange(1, 50)}
                best_params = self.GridSearch(model=KNeighborsClassifier(), params=params)

                model = KNeighborsClassifier(n_neighbors=best_params["n_neighbors"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "KNN", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "KNN_GridSearch" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "KNN", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "KNN_GridSearch" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelGridSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
            elif self.radioButtonSVMGridSearchCV.isChecked():
                params = {'C': np.arange(1, 10)}
                best_params = self.GridSearch(model=SVC(), params=params)

                model = SVC(C=best_params["C"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "SVM", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "SVM_GridSearch" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "SVM", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "SVM_GridSearch" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelGridSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
            elif self.radioButtonRandomForestTreeGridSearchCV.isChecked():
                params = {'max_depth': [2, 5, 8, 10], 'max_features': [2, 5, 8], 'n_estimators': [10, 500, 1000],
                          'min_samples_split': [2, 5, 10]}
                best_params = self.GridSearch(model=RandomForestClassifier(), params=params)

                model = RandomForestClassifier(max_depth=best_params["max_depth"],
                                               max_features=best_params["max_features"],
                                               n_estimators=best_params["n_estimators"],
                                               min_samples_split=best_params["min_samples_split"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "Random Forest Tree", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "Random Forest Tree_GridSearch" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "Random Forest Tree", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "Random Forest Tree_GridSearch" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelGridSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
            elif self.radioButtonDecisionTreeGridSearchCV.isChecked():
                params = {'criterion': ['gini', 'entropy'], 'max_depth': np.arange(1, 50),
                          'min_samples_split': np.arange(1, 20)}
                best_params = self.GridSearch(model=DecisionTreeClassifier(), params=params)

                model = DecisionTreeClassifier(criterion=best_params["criterion"],
                                               max_depth=best_params["max_depth"],
                                               min_samples_split=best_params["min_samples_split"])

                model.fit(self.X_train, self.y_train)
                y_pred_gridSearch = model.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred_gridSearch)

                self.createConfusionMatrix(conf_matr, "Decision Tree", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "Decision Tree_GridSearch" + "confusion_matrix.png")
                self.labelModelTuningConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(y_pred_gridSearch, "Decision Tree", "GridSearch")
                self.pixmap = QPixmap("./Plots/" + "Decision Tree_GridSearch" + "roc_curve.png")
                self.labelModelTuningRocCurve.setPixmap(self.pixmap)

                self.labelGridSearchAccuracy.setText(str(accuracy_score(self.y_test, y_pred_gridSearch)))
        except Exception as e:
            print(e)

    def RandomSearch(self, model, params):

        self.listWidgetRandomSearchParams.clear()
        grid = RandomizedSearchCV(model, params, cv=10, verbose=2, n_jobs=-1)
        grid.fit(self.X_train, self.y_train)

        best_params = dict(grid.best_params_)
        for param in best_params:
            listItem = str(param) + ": " + str(best_params[param])
            self.listWidgetRandomSearchParams.addItem(listItem)

        return best_params

    def GridSearch(self, model, params):

        self.listWidgetGridSearchBestParams.clear()
        grid = GridSearchCV(model, params, cv=10, verbose=2, n_jobs=-1)
        grid.fit(self.X_train, self.y_train)

        best_params = dict(grid.best_params_)
        for param in best_params:
            listItem = str(param) + ": " + str(best_params[param])
            self.listWidgetGridSearchBestParams.addItem(listItem)

        return best_params

    def Kfold(self, model_, X, y, n_fold, isRegression):

        kf = KFold(n_splits=n_fold)
        kf.get_n_splits(X)
        X = np.array(X)

        scores = []
        i = 1
        for train_index, test_index in kf.split(X):

            X_train, X_test = X[train_index], X[test_index]
            y_train, y_test = y[train_index], y[test_index]
            print("{}. Fold:".format(str(i)))
            print("X_train:")
            print(X_train)
            print("Y_train:")
            print(y_train)
            model = model_
            model = model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            if isRegression:
                mse = mean_squared_error(y_test, y_pred)
                scores.append(mse)
            else:
                acc_score = accuracy_score(y_test, y_pred)
                scores.append(acc_score)

                conf_matrix = confusion_matrix(y_test, y_pred)
                self.createOverLappedMatrix(conf_matrix, "KFold Overlapped Matrix", y_test, i)

            i += 1

        return np.mean(scores)

    def KFoldRegression(self):
        try:
            if self.radioButtonLinearRegression.isChecked():

                self.liner_model_kfold = LinearRegression()
                self.liner_kfold_score = self.Kfold(model_=self.liner_model_kfold, X=self.X, y=self.y,
                                                    n_fold=self.spinBoxNFoldRegression.value(), isRegression=1)
                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.liner_kfold_score)))
            elif self.radioButtonLogisticRegression.isChecked():

                self.logistic_model_kfold = LogisticRegression()
                self.logistic_kfold_score = self.Kfold(model_=self.logistic_model_kfold, X=self.X, y=self.y,
                                                       n_fold=self.spinBoxNFoldRegression.value(), isRegression=1)
                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.logistic_kfold_score)))
            elif self.radioButtonSVMRegression.isChecked():

                self.svm_model_kfold = KNeighborsClassifier()
                self.svm_kfold_score = self.Kfold(model_=self.svm_model_kfold, X=self.X, y=self.y,
                                                  n_fold=self.spinBoxNFoldRegression.value(), isRegression=1)
                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.svm_kfold_score)))
            elif self.radioButtonDecisionTreeRegression.isChecked():

                self.decision_tree_model_kfold = KNeighborsClassifier()
                self.decision_kfold_score = self.Kfold(model_=self.decision_tree_model_kfold, X=self.X, y=self.y,
                                                       n_fold=self.spinBoxNFoldRegression.value(), isRegression=1)
                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.decision_kfold_score)))

        except Exception as e:
            print(e)

    def KFoldClassification(self):
        try:
            if self.radioButtonKNNClassifier.isChecked():

                self.knn_model = KNeighborsClassifier()
                self.knn_kfold_score = self.Kfold(model_=self.knn_model, X=self.X, y=self.y,
                                                  n_fold=self.spinBoxNFoldClassification.value(), isRegression=0)
                self.labelTestDataAccuracy.setText(str(self.knn_kfold_score))

            elif self.radioButtonDecisionTreeClassifier.isChecked():
                self.decision_tree_model = DecisionTreeClassifier()
                self.decision_kfold_score = self.Kfold(model_=self.decision_tree_model, X=self.X, y=self.y,
                                                       n_fold=self.spinBoxNFoldClassification.value(), isRegression=0)
                self.labelTestDataAccuracy.setText(str(self.decision_kfold_score))
            elif self.radioButtonRandomForestTreeClassifier.isChecked():

                self.rfc_model = DecisionTreeClassifier()
                self.random_forest_kfold_score = self.Kfold(model_=self.rfc_model, X=self.X, y=self.y,
                                                            n_fold=self.spinBoxNFoldClassification.value(),
                                                            isRegression=0)
                self.labelTestDataAccuracy.setText(str(self.random_forest_kfold_score))
            elif self.radioButtonNaiveBayesClassifier.isChecked():

                self.gnb_model = GaussianNB()
                self.gaussian_kfold_score = self.Kfold(model_=self.gnb_model, X=self.X, y=self.y,
                                                       n_fold=self.spinBoxNFoldClassification.value(), isRegression=0)
                self.labelTestDataAccuracy.setText(str(self.gaussian_kfold_score))

        except Exception as e:
            print(e)

    def openFile(self):
        try:
            self.comboBoxTargetFeatures.clear()
            self.comboBoxFeatures.clear()
            path = QFileDialog.getOpenFileName(self, 'Open CSV', os.getenv('HOME'), 'CSV(*.csv)')
            data = pd.read_csv(path[0])
            self.all_data = data.copy()
            self.textboxDataPath.setPlainText(path[0])
            self.showData()
            for i in self.all_data.columns:
                self.comboBoxTargetFeatures.addItem(i)
                self.comboBoxFeatures.addItem(i)
        except Exception as e:
            print(e)

    def showData(self):
        try:
            self.labelMissingValueCount.setText(str(self.all_data.isnull().sum().sum()))
            self.labelFeaturesValue.setText(str(len(self.all_data.columns)))
            numRows = self.all_data.shape[0]
            self.tableViewDatas.setColumnCount(len(self.all_data.columns))
            self.tableViewDatas.setRowCount(numRows)
            self.tableViewDatas.setHorizontalHeaderLabels(self.all_data.columns)

            for i in range(len(self.all_data.columns)):
                for j in range(numRows):
                    self.tableViewDatas.setItem(j, i, QTableWidgetItem(str(self.all_data.iat[j, i])))

            self.tableViewDatas.resizeColumnsToContents()
        except Exception as a:
            print(a)

    def extractTargetFeature(self):
        self.X = self.all_data.drop([self.comboBoxTargetFeatures.currentText()], axis=1)
        self.y = self.all_data[self.comboBoxTargetFeatures.currentText()]
        print(type(self.y))
        self.X = pd.get_dummies(self.X)
        le = LabelEncoder()
        self.y = pd.Series(le.fit_transform(self.y))
        QMessageBox.about(self, "Uyarı", "Hedef öznitelik çıkartıldı.")

    def normalisation(self):

        return normalize(self.X)

    def standardisation(self):

        return scale(self.X)

    def minMaxScaler(self):

        scaler = MinMaxScaler(feature_range=(self.spinBoxMaxScale.value(), self.spinBoxMinScale.value()))
        return scaler.fit_transform(self.X)

    def whichStandardisation(self):
        col = self.X.columns
        if self.radioButtonMinMaxScaler.isChecked():
            self.X = self.minMaxScaler()
            self.X = pd.DataFrame(self.X, columns=col)

        elif self.radioButtonStandardization.isChecked():
            self.X = self.standardisation()
            self.X = pd.DataFrame(self.X, columns=col)

        elif self.radioButtonNormasilation.isChecked():
            self.X = self.normalisation()
            self.X = pd.DataFrame(self.X, columns=col)
        QMessageBox.about(self, "Uyarı", "İşlemler başarıyla uygulandı.")

    def missinValuesMean(self):
        try:

            numeric_data = self.all_data.select_dtypes(include=['float64', 'int64'])
            if self.radioButtonDeleteMissingValues.isChecked():

                self.all_data = self.all_data.dropna()

            elif self.radioButtonMeanImport.isChecked():

                for value in numeric_data:
                    imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
                    imputer.fit(self.all_data[value].values.reshape(-1, 1))
                    self.all_data[value] = imputer.fit_transform(self.all_data[value].values.reshape(-1, 1))

            elif self.radioButtonMedianImport.isChecked():
                for value in numeric_data:
                    imputer = SimpleImputer(missing_values=np.nan, strategy='median')
                    imputer.fit(self.all_data[value].values.reshape(-1, 1))
                    self.all_data[value] = imputer.fit_transform(self.all_data[value].values.reshape(-1, 1))

        except Exception as e:
            print(e)

    def train_test_split_operations(self):

        try:

            self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y,
                                                                                    test_size=self.doubleSpinBoxTestSize.value(),
                                                                                    random_state=self.spinBoxRandomState.value())
            self.labelTrainDataCount.setText(str(self.X_train.shape[0]))
            self.labelTestDataCount.setText(str(self.X_test.shape[0]))
            numRows = len(self.X_train)
            numColumns = len(self.X.columns)
            self.tableWidgetTrainX.setColumnCount(numColumns)
            self.tableWidgetTrainX.setRowCount(numRows)

            for i in range(numRows):
                for j in range(numColumns):
                    self.tableWidgetTrainX.setItem(i, j, QTableWidgetItem(str(self.X_train.values[i, j])))

            self.tableWidgetTrainX.resizeColumnsToContents()

            numRows = len(self.y_train)
            self.tableWidgetTrainY.setColumnCount(1)
            self.tableWidgetTrainY.setRowCount(numRows)

            for i in range(numRows):
                self.tableWidgetTrainY.setItem(0, i, QTableWidgetItem(str(self.y_train.values[i])))

            self.tableWidgetTrainY.resizeColumnsToContents()

            numRows = len(self.X_test)
            numColumns = len(self.X.columns)
            self.tableWidgetTestX.setColumnCount(numColumns)
            self.tableWidgetTestX.setRowCount(numRows)

            for i in range(numRows):
                for j in range(numColumns):
                    self.tableWidgetTestX.setItem(i, j, QTableWidgetItem(str(self.X_test.values[i, j])))

            self.tableWidgetTestX.resizeColumnsToContents()

            numRows = len(self.y_test)
            self.tableWidgetTestY.setColumnCount(1)
            self.tableWidgetTestY.setRowCount(numRows)

            for i in range(numRows):
                self.tableWidgetTestY.setItem(0, i, QTableWidgetItem(str(self.y_test.values[i])))

            self.tableWidgetTestY.resizeColumnsToContents()


        except Exception as e:
            print(e)

    def classificationClicked(self):
        try:
            if self.radioButtonKNNClassifier.isChecked():

                self.knn_model = KNeighborsClassifier()
                self.knn_model = self.knn_model.fit(self.X_train, self.y_train)

                self.y_pred_knn = self.knn_model.predict(self.X_test)

                self.conf_matrix_knn = confusion_matrix(self.y_test, self.y_pred_knn)

                self.acc_score_knn = accuracy_score(self.y_test, self.y_pred_knn)

                self.labelTestDataAccuracy.setText(str(self.acc_score_knn))
                self.createConfusionMatrix(self.conf_matrix_knn, "Knn", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Knn_Holdout" + "confusion_matrix.png")
                self.labelConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(self.y_pred_knn, "Knn", "Holdout")

                self.pixmap = QPixmap("./Plots/" + "Knn_Holdout" + "roc_curve.png")
                self.labelRocCurve.setPixmap(self.pixmap)

            elif self.radioButtonDecisionTreeClassifier.isChecked():

                self.decision_tree_model = DecisionTreeClassifier()
                self.decision_tree_model = self.decision_tree_model.fit(self.X_train, self.y_train)

                self.y_pred_decision_classifier = self.decision_tree_model.predict(self.X_test)

                self.conf_matrix_decision_classification = confusion_matrix(self.y_test,
                                                                            self.y_pred_decision_classifier)

                self.acc_score_decision = accuracy_score(self.y_test, self.y_pred_decision_classifier)

                self.labelTestDataAccuracy.setText(str(self.acc_score_decision))
                self.createConfusionMatrix(self.conf_matrix_decision_classification, "Decision Tree", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Decision Tree_Holdout" + "confusion_matrix.png")
                self.labelConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(self.y_pred_decision_classifier, "Decision Tree", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Decision Tree_Holdout" + "roc_curve.png")
                self.labelRocCurve.setPixmap(self.pixmap)
            elif self.radioButtonRandomForestTreeClassifier.isChecked():

                self.random_forest_classifier_model = RandomForestClassifier()
                self.random_forest_classifier_model = self.random_forest_classifier_model.fit(self.X_train,
                                                                                              self.y_train)

                self.y_pred_rfc_classifier = self.random_forest_classifier_model.predict(self.X_test)

                self.conf_matrix_rfc = confusion_matrix(self.y_test, self.y_pred_rfc_classifier)

                self.acc_score_rfc = accuracy_score(self.y_test, self.y_pred_rfc_classifier)

                self.labelTestDataAccuracy.setText(str(self.acc_score_rfc))
                self.createConfusionMatrix(self.conf_matrix_rfc, "Random Forest Tree", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Random Forest Tree_Holdout" + "confusion_matrix.png")
                self.labelConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(self.y_pred_rfc_classifier, "Random Forest Tree", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Random Forest Tree_Holdout" + "roc_curve.png")
                self.labelRocCurve.setPixmap(self.pixmap)
            elif self.radioButtonNaiveBayesClassifier.isChecked():

                self.naive_bayes_classifier = GaussianNB()
                self.naive_bayes_classifier = self.naive_bayes_classifier.fit(self.X_train, self.y_train)

                self.y_pred_nb_classifier = self.naive_bayes_classifier.predict(self.X_test)

                self.conf_matrix_nbc = confusion_matrix(self.y_test, self.y_pred_nb_classifier)

                self.acc_score_nbc = accuracy_score(self.y_test, self.y_pred_nb_classifier)

                self.labelTestDataAccuracy.setText(str(self.acc_score_nbc))
                self.createConfusionMatrix(self.conf_matrix_nbc, "Naive Bayes", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Naive Bayes_Holdout" + "confusion_matrix.png")
                self.labelConfusionMatrix.setPixmap(self.pixmap)
                self.roc_curve(self.y_pred_nb_classifier, "Naive Bayes", "Holdout")
                self.pixmap = QPixmap("./Plots/" + "Naive Bayes_Holdout" + "roc_curve.png")
                self.labelRocCurve.setPixmap(self.pixmap)
        except Exception as e:
            print(e)

    def createConfusionMatrix(self, conf_m, conf_m_name, operation_name):

        plt.close()
        plt.figure(figsize=(10, 3))
        sns.set(font_scale=1.2)
        ax = sns.heatmap(conf_m, annot=True, xticklabels=np.unique(self.y_test),
                         yticklabels=np.unique(self.y_test), cbar=False, cmap='Blues', linewidths=1,
                         linecolor='black', fmt='.0f')
        plt.yticks(rotation=0)
        plt.xlabel('Predicted labels')
        plt.ylabel('True labels')
        ax.xaxis.set_ticks_position('top')
        plt.title('Confusion matrix - test data')
        plt.savefig("./Plots/" + conf_m_name + "_" + operation_name + "confusion_matrix.png")

    def createOverLappedMatrix(self, conf_m, conf_m_name, y_test, i):

        plt.clf()
        plt.figure(figsize=(5, 3))
        sns.set(font_scale=1.2)
        ax = sns.heatmap(conf_m, annot=True, xticklabels=np.unique(y_test),
                         yticklabels=np.unique(y_test), cbar=False, cmap='Blues', linewidths=1,
                         linecolor='black', fmt='.0f')
        plt.yticks(rotation=0)
        plt.xlabel('Predicted labels')
        plt.ylabel('True labels')
        ax.xaxis.set_ticks_position('top')
        plt.title('Confusion matrix - test data')
        plt.savefig("./KFoldGraphs/" + conf_m_name + str(i) + ".png")

    def regressionClicked(self):
        try:
            if self.radioButtonLinearRegression.isChecked():

                self.linear_model = LinearRegression()
                self.linear_model = self.linear_model.fit(self.X_train, self.y_train)

                self.y_pred_lm = self.linear_model.predict(self.X_test)
                self.mse_lm = mean_squared_error(self.y_test, self.y_pred_lm)

                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.mse_lm)))

                self.acc_real_and_pred(self.y_pred_lm, "Linear Regression")
                self.roc_curve(self.y_pred_lm, "Linear Regressio")
            elif self.radioButtonLogisticRegression.isChecked():

                self.logistic_model = LogisticRegression()
                self.logistic_model = self.logistic_model.fit(self.X_train, self.y_train)

                self.y_pred_logistic = self.logistic_model.predict(self.X_test)

                self.mse_logistic = mean_squared_error(self.y_test, self.y_pred_logistic)

                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.mse_logistic)))

                self.acc_real_and_pred(self.y_pred_logistic, "Logistic Regression")
                self.roc_curve(self.y_pred_logistic, "Logistic Regression")
            elif self.radioButtonSVMRegression.isChecked():

                self.svm_regressor_model = SVR()
                self.svm_regressor_model = self.svm_regressor_model.fit(self.X_train, self.y_train)

                self.y_pred_svm_reg = self.svm_regressor_model.predict(self.X_test)

                self.mse_svm_reg = mean_squared_error(self.y_test, self.y_pred_svm_reg)

                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.mse_svm_reg)))
                self.roc_curve(self.y_pred_svm_reg, "svm")

                self.acc_real_and_pred(self.y_pred_svm_reg, "SVM Regression")
            elif self.radioButtonDecisionTreeRegression.isChecked():
                self.decision_tree_model_reg = SVR()
                self.decision_tree_model_reg = self.decision_tree_model_reg.fit(self.X_train, self.y_train)

                self.y_pred_decision_regressor = self.decision_tree_model_reg.predict(self.X_test)

                self.mse_decision_tree = mean_squared_error(self.y_test, self.y_pred_decision_regressor)

                self.labelTestDataAccuracyRegression.setText(str(np.sqrt(self.mse_decision_tree)))

                self.acc_real_and_pred(self.y_pred_decision_regressor, "Decision Tree Regression")
                self.roc_curve(self.y_pred_decision_regressor, "decision_tree")

        except Exception as e:
            print(e)

    def acc_real_and_pred(self, y_pred, algorithm_name):

        fig = plt.figure()
        ax = fig.add_subplot(111)

        ax.errorbar(self.y_test, y_pred, fmt='o')
        ax.errorbar([1, self.y_test.max()], [1, self.y_test.max()])

        plt.savefig("./Plots/" + algorithm_name + "real_predict.png")

        self.pixmap = QPixmap("./Plots/" + algorithm_name + "real_predict.png")
        self.labelPredictReal.setPixmap(self.pixmap)

    def roc_curve(self, y_pred, model_name, operation_name="default"):
        try:

            y_test_encoded = to_categorical(self.y_test)
            fpr = dict()
            tpr = dict()
            roc_auc = dict()

            y_pred_encoded = to_categorical(y_pred)
            print(y_pred_encoded)
            for i in range(len(y_test_encoded[0])):
                fpr[i], tpr[i], _ = roc_curve(y_test_encoded[:, i], y_pred_encoded[:, i])
                roc_auc[i] = auc(fpr[i], tpr[i])

            fpr["micro"], tpr["micro"], _ = roc_curve(y_test_encoded.ravel(), y_pred_encoded.ravel())

            roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])
            all_fpr = np.unique(np.concatenate([fpr[i] for i in range(len(y_test_encoded[0]))]))
            mean_tpr = np.zeros_like(all_fpr)

            for i in range(len(y_test_encoded[0])):
                mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])

            mean_tpr /= len(y_test_encoded[0])
            fpr["macro"] = all_fpr
            tpr["macro"] = mean_tpr
            roc_auc["macro"] = auc(fpr["macro"], tpr["macro"])

            plt.cla()
            plt.clf()
            plt.figure()
            plt.plot(fpr["micro"], tpr["micro"],
                     label='micro-average ROC curve (area = {0:0.2f})'
                           ''.format(roc_auc["micro"]),
                     color='deeppink', linestyle=':', linewidth=4)

            plt.plot(fpr["macro"], fpr["macro"],
                     label='macro-average ROC curve (area = {0:0.2f})'
                           ''.format(roc_auc["macro"]),
                     color='navy', linestyle=':', linewidth=4)

            colors = cycle(['aqua', 'darkorange', 'cornflowerblue'])
            for i, color in zip(range(len(y_test_encoded[0])), colors):
                plt.plot(fpr[i], tpr[i], color=color, lw=2,
                         label='ROC curve of class {0} (area = {1:0.2f})'
                               ''.format(i, roc_auc[i]))

            plt.plot([0, 1], [0, 1], 'k--', lw=2)
            plt.xlim([0.0, 1.0])
            plt.ylim([0.0, 1.05])
            plt.xlabel('False Positive Rate')
            plt.ylabel('True Positive Rate')
            plt.title('ROC Curve to multi-class')
            plt.legend(loc="lower right")
            plt.savefig("./Plots/" + model_name + "_" + operation_name + "roc_curve.png")
            plt.cla()
            plt.clf()


        except Exception as e:
            print(e)

    def Bagging(self, model):
        try:
            self.bagging_classifier = BaggingClassifier(model)

            self.bagging_classifier.fit(self.X_train, self.y_train)

            self.y_pred_bagging_classifier = self.bagging_classifier.predict(self.X_test)
            bagging_conf_matrix = confusion_matrix(self.y_test, self.y_pred_bagging_classifier)
            acc_score_bagging = accuracy_score(self.y_test, self.y_pred_bagging_classifier)

            return bagging_conf_matrix, acc_score_bagging
        except Exception as e:
            print(e)

    def BaggingButtonClick(self):
        try:
            if self.radioButtonKNNBagging.isChecked():
                self.conf_matrix_bagging, self.acc_score_bagging = self.Bagging(KNeighborsClassifier())

                self.createConfusionMatrix(self.conf_matrix_bagging, "KNN", "Bagging")
                self.pixmap = QPixmap("./Plots/" + "KNN_Bagging" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(self.y_pred_bagging_classifier, "KNN", "Bagging")
                self.pixmap = QPixmap("./Plots/" + "KNN_Bagging" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(self.acc_score_bagging))
            elif self.radioButtonNaiveBayesBagging.isChecked():
                self.conf_matrix_bagging, self.acc_score_bagging = self.Bagging(GaussianNB())

                self.createConfusionMatrix(self.conf_matrix_bagging, "Naive Bayes", "Bagging")
                self.pixmap = QPixmap("./Plots/" + "Naive Bayes_Bagging" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(self.y_pred_bagging_classifier, "Naive Bayes", "Bagging")
                self.pixmap = QPixmap("./Plots/" + "Naive Bayes_Bagging" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(self.acc_score_bagging))
            elif self.radioButtonDecisionTreeBagging.isChecked():
                self.conf_matrix_bagging, self.acc_score_bagging = self.Bagging(DecisionTreeClassifier())

                self.createConfusionMatrix(self.conf_matrix_bagging, "Decision Tree", "Bagging")
                self.pixmap = QPixmap("./Plots/" + "Decision Tree_Bagging" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(self.y_pred_bagging_classifier, "Decision Tree", "Bagging")
                self.pixmap = QPixmap("./Plots/" + "Decision Tree_Bagging" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(self.acc_score_bagging))

        except Exception as e:
            print(e)

    def Boosting(self):
        try:
            if self.radioButtonGBMBoosting.isChecked():
                model = GradientBoostingClassifier()
                model.fit(self.X_train, self.y_train)
                y_pred = model.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "GBM", "Boosting")
                self.pixmap = QPixmap("./Plots/" + "GBM_Boosting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "GBM", "Boosting")
                self.pixmap = QPixmap("./Plots/" + "GBM_Boosting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(accuracy_score(self.y_test, y_pred)))
            elif self.radioButtonXGBoostBoosting.isChecked():
                model = XGBClassifier()
                model.fit(self.X_train, self.y_train)

                y_pred = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "XGBoost", "Boosting")
                self.pixmap = QPixmap("./Plots/" + "XGBoost_Boosting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "XGBoost", "Boosting")
                self.pixmap = QPixmap("./Plots/" + "XGBoost_Boosting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)
                self.labelAccuracyEnsemble.setText(str(accuracy_score(self.y_test, y_pred)))

            elif self.radioButtonCatBoostBoosting.isChecked():

                model = CatBoostClassifier()
                model.fit(self.X_train, self.y_train)

                y_pred = model.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "CatBoost", "Boosting")
                self.pixmap = QPixmap("./Plots/" + "CatBoost_Boosting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "CatBoost", "Boosting")
                self.pixmap = QPixmap("./Plots/" + "CatBoost_Boosting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(accuracy_score(self.y_test, y_pred)))

        except Exception as e:
            print(e)

    def Stacking(self):
        try:
            estimators3 = [
                ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),
                ('knn', KNeighborsClassifier(n_neighbors=5)),
                ('dst', DecisionTreeClassifier())]
            estimators2 = [
                ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),
                ('dst', DecisionTreeClassifier())]
            estimators1 = [
                ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),
                ('knn', KNeighborsClassifier(n_neighbors=5))]
            estimators4 = [
                ('knn', KNeighborsClassifier(n_neighbors=5)),
                ('dst', DecisionTreeClassifier())]
            if (
                    self.checkBoxKNNStacking.isChecked() and self.checkBoxRFCStacking.isChecked() and self.checkBoxDecisionTreeStacking.isChecked()):
                clf = StackingClassifier(estimators=estimators3, final_estimator=LogisticRegression())
                stackingAccuracy = clf.fit(self.X_train, self.y_train).score(self.X_test, self.y_test)

                y_pred = clf.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "KNN_RFC_DT", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "KNN_RFC_DT_Stacking" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "KNN_RFC_DT", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "KNN_RFC_DT_Stacking" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(stackingAccuracy))

            elif (self.checkBoxKNNStacking.isChecked() and self.checkBoxRFCStacking.isChecked()):
                clf = StackingClassifier(estimators=estimators1, final_estimator=LogisticRegression())
                stackingAccuracy = clf.fit(self.X_train, self.y_train).score(self.X_test, self.y_test)

                y_pred = clf.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "KNN_RFC", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "KNN_RFC_Stacking" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "KNN_RFC", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "KNN_RFC_Stacking" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)
                self.labelAccuracyEnsemble.setText(str(stackingAccuracy))

            elif (self.checkBoxKNNStacking.isChecked() and self.checkBoxDecisionTreeStacking.isChecked()):
                clf = StackingClassifier(estimators=estimators4, final_estimator=LogisticRegression())
                stackingAccuracy = clf.fit(self.X_train, self.y_train).score(self.X_test, self.y_test)

                y_pred = clf.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "KNN_DT", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "KNN_DT_Stacking" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "KNN_DT", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "KNN_DT_Stacking" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                self.labelAccuracyEnsemble.setText(str(stackingAccuracy))

            elif (self.checkBoxRFCStacking.isChecked() and self.checkBoxDecisionTreeStacking.isChecked()):
                clf = StackingClassifier(estimators=estimators2, final_estimator=LogisticRegression())
                stackingAccuracy = clf.fit(self.X_train, self.y_train).score(self.X_test, self.y_test)

                y_pred = clf.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred)

                self.createConfusionMatrix(conf_matr, "RFC_DT", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "RFC_DT_Stacking" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred, "RFC_DT", "Stacking")
                self.pixmap = QPixmap("./Plots/" + "RFC_DT_Stacking" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)
                self.labelAccuracyEnsemble.setText(str(stackingAccuracy))

        except Exception as a:
            print(a)

    def Voting(self):
        try:
            if (
                    self.checkBoxKNNVoting.isChecked() and self.checkBoxRFCVoting.isChecked() and self.checkBoxDecisionTreeVoting.isChecked()):
                clf1 = RandomForestClassifier()
                clf2 = DecisionTreeClassifier()
                clf3 = KNeighborsClassifier()
                eclf1 = VotingClassifier(estimators=[('rfc', clf1), ('dt', clf2), ('knn', clf3)], voting='hard')
                eclf1 = eclf1.fit(self.X_train, self.y_train)
                y_pred_eclf1 = eclf1.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred_eclf1)

                self.createConfusionMatrix(conf_matr, "RFC_DT_KNN", "Voting")
                self.pixmap = QPixmap("./Plots/" + "RFC_DT_KNN_Voting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred_eclf1, "RFC_DT_KNN", "Voting")
                self.pixmap = QPixmap("./Plots/" + "RFC_DT_KNN_Voting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)

                accuracyVoting = accuracy_score(self.y_test, y_pred_eclf1)
                self.labelAccuracyEnsemble.setText(str(accuracyVoting))

            elif (self.checkBoxKNNVoting.isChecked() and self.checkBoxRFCVoting.isChecked()):
                clf1 = RandomForestClassifier()
                clf2 = KNeighborsClassifier()
                eclf1 = VotingClassifier(estimators=[('rfc', clf1), ('knn', clf2)], voting='hard')
                eclf1 = eclf1.fit(self.X_train, self.y_train)
                y_pred_eclf1 = eclf1.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred_eclf1)

                self.createConfusionMatrix(conf_matr, "RFC_KNN", "Voting")
                self.pixmap = QPixmap("./Plots/" + "RFC_KNN_Voting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred_eclf1, "RFC_KNN", "Voting")
                self.pixmap = QPixmap("./Plots/" + "RFC_KNN_Voting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)
                accuracyVoting = accuracy_score(self.y_test, y_pred_eclf1)
                self.labelAccuracyEnsemble.setText(str(accuracyVoting))

            elif (self.checkBoxKNNVoting.isChecked() and self.checkBoxDecisionTreeVoting.isChecked()):
                clf1 = DecisionTreeClassifier()
                clf2 = KNeighborsClassifier()
                eclf1 = VotingClassifier(estimators=[('dt', clf1), ('knn', clf2)], voting='hard')
                eclf1 = eclf1.fit(self.X_train, self.y_train)
                y_pred_eclf1 = eclf1.predict(self.X_test)
                conf_matr = confusion_matrix(self.y_test, y_pred_eclf1)

                self.createConfusionMatrix(conf_matr, "KNN_DT", "Voting")
                self.pixmap = QPixmap("./Plots/" + "KNN_DT_Voting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred_eclf1, "KNN_DT", "Voting")
                self.pixmap = QPixmap("./Plots/" + "KNN_DT_Voting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)
                accuracyVoting = accuracy_score(self.y_test, y_pred_eclf1)
                self.labelAccuracyEnsemble.setText(str(accuracyVoting))

            elif (self.checkBoxRFCVoting.isChecked() and self.checkBoxDecisionTreeVoting.isChecked()):
                clf1 = RandomForestClassifier()
                clf2 = DecisionTreeClassifier()
                eclf1 = VotingClassifier(estimators=[('rfc', clf1), ('dt', clf2)], voting='hard')
                eclf1 = eclf1.fit(self.X_train, self.y_train)
                y_pred_eclf1 = eclf1.predict(self.X_test)

                conf_matr = confusion_matrix(self.y_test, y_pred_eclf1)

                self.createConfusionMatrix(conf_matr, "RFC_DT", "Voting")
                self.pixmap = QPixmap("./Plots/" + "RFC_DT_Voting" + "confusion_matrix.png")
                self.labelConfusionMatrixEnsemble.setPixmap(self.pixmap)

                self.roc_curve(y_pred_eclf1, "RFC_DT", "Voting")
                self.pixmap = QPixmap("./Plots/" + "RFC_DT_Voting" + "roc_curve.png")
                self.labelROCCurveEnsemble.setPixmap(self.pixmap)
                accuracyVoting = accuracy_score(self.y_test, y_pred_eclf1)
                self.labelAccuracyEnsemble.setText(str(accuracyVoting))

        except Exception as a:
            print(a)

    def DeepLearningAccGraph(self, history):
        try:
            plt.close()
            plt.figure(figsize=(20, 5))
            # plot loss & val loss
            plt.subplot(1, 2, 1)
            sns.lineplot(x=history.epoch, y=history.history['loss'], color='red', label='Loss')
            sns.lineplot(x=history.epoch, y=history.history['val_loss'], color='orange', label='Val Loss')
            plt.title('Loss on train vs test')
            plt.legend(loc='best')

            # plot accuracy and val accuracy
            plt.subplot(1, 2, 2)
            sns.lineplot(x=history.epoch, y=history.history['binary_accuracy'], color='blue', label='Accuracy')
            sns.lineplot(x=history.epoch, y=history.history['val_binary_accuracy'], color='green', label='Val Accuracy')
            plt.title('Accuracy on train vs test')
            plt.legend(loc='best')

            plt.savefig("./Plots/DeepLearningAccLoosGraph.png")
        except Exception as e:
            msg = QMessageBox(self)
            msg.setWindowTitle("Hata")
            msg.setText(str(e))

            msg.exec_()


